using System.ComponentModel.DataAnnotations;
using JobifyEcom.Enums;

namespace JobifyEcom.Models;

/// <summary>
/// Represents a registered user of the platform, including login credentials, roles, and email verification status.
/// </summary>
public class User
{
    /// <summary>
    /// The unique identifier for the user.
    /// <para>This value is automatically generated by the backend and cannot be modified externally.</para>
    /// </summary>
    [Key]
    public Guid Id { get; private set; } = Guid.NewGuid();

    /// <summary>
    /// The full name of the user.
    /// </summary>
    [Required]
    [MinLength(2)]
    [StringLength(100)]
    public required string Name { get; set; }

    /// <summary>
    /// The user's email address. Must be unique and lowercase.
    /// </summary>
    [Required]
    [EmailAddress]
    [StringLength(100)]
    public required string Email { get; set; }

    /// <summary>
    /// The hashed password for authentication.
    /// </summary>
    [Required]
    public required string PasswordHash { get; set; }

    /// <summary>
    /// Computed property indicating whether the user has a worker/freelancer profile.
    /// <para>Returns <c>true</c> if <see cref="WorkerProfile"/> exists; otherwise <c>false</c>.</para>
    /// </summary>
    public bool IsWorker => WorkerProfile is not null;

    /// <summary>
    /// Internal storage for the staff role.
    /// </summary>
    private SystemRole? _staffRole;

    /// <summary>
    /// The staff role assigned to the user for platform administration.
    /// <para>Valid values are <see cref="SystemRole.Admin"/>, <see cref="SystemRole.SuperAdmin"/>,
    /// or <c>null</c> for regular users.</para>
    /// <para>Attempting to assign any other value will throw an <see cref="ArgumentException"/>.</para>
    /// </summary>
    public SystemRole? StaffRole
    {
        get => _staffRole;
        set
        {
            if (value is not (null or SystemRole.Admin or SystemRole.SuperAdmin))
            {
                throw new ArgumentException($"Staff Role can only be {SystemRole.Admin}, {SystemRole.SuperAdmin}, or null.");
            }

            _staffRole = value;
        }
    }

    /// <summary>
    /// Indicates whether the user's email address has been confirmed.
    /// </summary>
    public bool IsEmailConfirmed { get; set; } = false;

    /// <summary>
    /// A unique token used for verifying the user's email address.
    /// </summary>
    public Guid? EmailConfirmationToken { get; set; }

    /// <summary>
    /// Indicates whether the account is locked and the user cannot log in.
    /// </summary>
    public bool IsLocked { get; set; } = false;

    /// <summary>
    /// The UTC date and time when the account was locked, if applicable.
    /// </summary>
    public DateTime? LockedAt { get; set; }

    /// <summary>
    /// A unique identifier that changes whenever the user's security credentials are updated or tokens are invalidated.
    /// <para>Used to validate JWT tokens and ensure tokens issued before this value are rejected.</para>
    /// </summary>
    [Required]
    public Guid SecurityStamp { get; set; } = Guid.Empty;

    /// <summary>
    /// The UTC date and time when the user was created.
    /// <para>This value is automatically set by the backend and cannot be modified externally.</para>
    /// </summary>
    public DateTime CreatedAt { get; private set; } = DateTime.UtcNow;

    /// <summary>
    /// The UTC date and time when the user was last updated.
    /// </summary>
    [Required]
    public required DateTime UpdatedAt { get; set; }

    /// <summary>
    /// The worker/freelancer profile associated with this user, if they have created one.
    /// <para>If this is <c>null</c>, the user is a regular platform member and not a worker.</para>
    /// </summary>
    public WorkerProfile? WorkerProfile { get; set; }
}
